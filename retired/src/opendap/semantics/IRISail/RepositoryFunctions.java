/*
 * /////////////////////////////////////////////////////////////////////////////
 * // This file is part of the "Hyrax Data Server" project.
 * //
 * //
 * // Copyright (c) 2013 OPeNDAP, Inc.
 * // Author: Nathan David Potter  <ndp@opendap.org>
 * //
 * // This library is free software; you can redistribute it and/or
 * // modify it under the terms of the GNU Lesser General Public
 * // License as published by the Free Software Foundation; either
 * // version 2.1 of the License, or (at your option) any later version.
 * //
 * // This library is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * // Lesser General Public License for more details.
 * //
 * // You should have received a copy of the GNU Lesser General Public
 * // License along with this library; if not, write to the Free Software
 * // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 * //
 * // You can contact OPeNDAP, Inc. at PO Box 112, Saunderstown, RI. 02874-0112.
 * /////////////////////////////////////////////////////////////////////////////
 */
package opendap.semantics.IRISail;

import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.ValueFactory;

import java.util.List;

/**
 * This class holds functions needed in post processing statements generated by construct rules.
 *
 */
public class RepositoryFunctions {

    /***************************************************************************
     * function join to concatenate strings
     *
     * @param RDFList - strings to concatenate.
     * @param createValue - a ValueFactory from the repository.
     * @return Value object.
     */
    public static Value join(List<String> RDFList, ValueFactory createValue) throws InterruptedException {
        int i = 0;
        boolean joinStrIsURL = false;
        String targetObj = "";
        if (RDFList.get(1).startsWith("http://")) {
            joinStrIsURL = true;
        }
        for (i = 1; i < RDFList.size() - 1; i++) {
            targetObj += RDFList.get(i) + RDFList.get(0); // rdfList.get(0) +
            
        }

        targetObj += RDFList.get(i); // last component no separator

        Value stObjStr;
        if (joinStrIsURL) {
            stObjStr = createValue.createURI(targetObj);
        } else {
            stObjStr = createValue.createLiteral(targetObj);
        }

        return stObjStr;
    }

    /**
     * @todo
     * Extract the local name of the RDF list
     * @param RDFList - String list of to be concatenated.
     * @param createValue - a ValueFactory from the repository.
     * @return
     */
    public static Value localName(List<String> RDFList, ValueFactory createValue) throws InterruptedException {
       
        
        String targetObj = "";
       
      
            targetObj = RDFList.get(0); // rdfList.get(0) +
            targetObj = targetObj.substring(targetObj.indexOf("#")+1);
      
            return createValue.createLiteral(targetObj);
    }

    public static Value cast (List<String> RDFList, ValueFactory createValue)  throws InterruptedException{
       
       String  label = RDFList.get(0); 
       String dataType = RDFList.get(1);
       URI dataTypeUri = createValue.createURI(dataType);
            return createValue.createLiteral(label, dataTypeUri);
           
           
    }
    
}
