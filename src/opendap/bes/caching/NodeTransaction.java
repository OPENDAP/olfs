package opendap.bes.caching;

import opendap.bes.BESError;
import org.jdom.Document;

/**
 * This class is used to wrap whatever object is being cached along with data used to
 * operate in the cache. Most significantly this class implements the Comparable interface such that
 * the "natural" ordering of instances will be based on the last time each instance was accessed by the server.
 * This is not an autonomous operation and is tightly coupled with code in "BesNodeCache.getNode()" to
 * ensure that the ordering remains correct.
 */
class NodeTransaction  {

    private long timeCreated;
    private String key;

    private Document besResponseDoc;
    private BESError besError;

    /**
     * Creates a NodeTransaction with a last update time and last accessed time
     * of "now".
     *
     * @param key The key value which will be used to identify this
     *            NodeTransaction.
     * @param response The response Object that was generated by the request. In
     *                 practice this is either an instance of Document or BESError.
     */
    /*
    NodeTransaction(String key, Object response){
        this.key = key;
        this.response = response;
        timeCreated = System.nanoTime();
    }
    */
    NodeTransaction(String key, Document response){
        this.key = key;
        this.besResponseDoc = response;
        this.besError = null;
        timeCreated = System.nanoTime();
    }

    NodeTransaction(String key, BESError error){
        this.key = key;
        this.besResponseDoc = null;
        this.besError = error;
        timeCreated = System.nanoTime();
    }

    public String getKey(){
        return key;
    }

    long getTimeCreated() {
        return timeCreated;
    }

    Document getResponseDocument(){ return besResponseDoc; }

    BESError getBesError() { return besError; }

    public boolean isError(){ return besError!=null;}

}
