
plugins {
    id 'java'
    id 'war'
    id 'idea'
    id 'project-report'
    id 'org.sonarqube' version '2.7'
}

group 'org.opendap'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://repo.enonic.com/public"
    }

}

apply plugin: 'maven'

ext {
    junitVersion = '5.6.2'
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    implementation group: 'junit', name: 'junit', version: '4.4'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.2'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.8'
    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.5'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    implementation group: 'org.owasp.encoder', name: 'encoder', version: '1.2.2'
    implementation group: 'org.jvnet.ogc', name: 'gml-v_3_2_1', version: '2.6.1'
    implementation group: 'org.jvnet.ogc', name: 'gmlcov-v_1_0', version: '2.6.1'
    implementation group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '0.11.0'
    implementation group: 'org.jvnet.ogc', name: 'ows-v_2_0', version: '2.6.1'
    implementation group: 'org.jvnet.ogc', name: 'sweCommon-v_2_0', version: '2.6.1'
    implementation group: 'org.jvnet.ogc', name: 'wcs-v_2_0', version: '2.6.1'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0-b170127.1453'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0-b170127.1453'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '0.9.26'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'
    implementation group: 'xerces', name: 'xercesImpl', version: '2.8.1'
    implementation group: 'commons-io', name: 'commons-io', version: '1.2'
    implementation group: 'org.jdom', name: 'jdom', version: '1.1.1'
    implementation group: 'net.sf.saxon', name: 'saxon', version: '9.1.0.8'
    implementation group: 'net.sf.saxon', name: 'saxon-jdom', version: '9.1.0.8'
    implementation group: 'org.clojars.pjt', name: 'saxon9-s9api', version: '9.1.0.8'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '0.9.26'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    implementation group: 'org.tuckey', name: 'urlrewritefilter', version: '3.2.0'
    implementation group: 'org.owasp.encoder', name: 'encoder-jsp', version: '1.2.2'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
}

// see https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
project.ext {
    resources_dir = "${projectDir}/resources"
    // WebInf_resources_dir = "${project.resources_dir}/hyrax/WEB-INF"
    // distribution_resources_dir = "${project.resources_dir}/distribution"

    // Build Directories
    build_dir = "${buildDir}"
    build_classes = "${project.build_dir}/classes"
    build_docs = "${project.build_dir}/docs"
    build_dist = "${project.build_dir}/dist"
    build_lib = "${project.build_dir}/lib"
    build_run = "${project.build_dir}/run"
    build_src = "${project.build_dir}/src"
    build_resources = "${project.build_dir}/resources"

    hyrax_resources_dir = "${project.resources_dir}/hyrax"
    ngap_resources_dir = "${project.resources_dir}/ngap"
    robots_resources_dir = "${project.resources_dir}/robots"
    build_robots_resources = "${project.build_dir}/robots"
    wcs_resources_dir = "${project.resources_dir}/WCS/2.0"
}

clean.doFirst {
    delete "src/main/webapp"
}

task init_dir {
    description "Create required folders in the build directory."
    doLast {
        mkdir "${project.build_dir}"
        mkdir "${project.'build_classes'}"
        mkdir "${project.'build_docs'}"
        mkdir "${project.'build_run'}"
    }
}

task copyResources (type: Copy) {
    description "Copy from original resources."
    from("resources/hyrax") {
        include "**"
        include "xsl/**"
        include "WEB-INF/**"
        exclude "WEB-INF/logback.xml"
        exclude "WEB-INF/logback-test.xml"
    }
    from("./doc") {
        exclude "src.distribution.readme"
        into("docs")
    }
    from("resources/WCS/2.0"){
        include "**"
        include "xsl/**"
        include "WEB-INF/**"
        exclude "WEB-INF/web.xml"
        exclude "WEB-INF/urlrewrite.xml"
        exclude "WEB-INF/logback.xml"
        exclude "WEB-INF/logback-test.xml"
    }
    into("src/main/webapp")
}

task copySources (type: Copy) {
    description "Copy original source code."
    from("opendap_src"){
        // include all the java files 
        include "opendap/**"
        include "org/opendap/**"
        exclude "opendap/cmr/**"
        // Exclude the experimental code
        exclude "opendap/experiments/**"
        // Exclude the Metacat code
        exclude "opendap/metacat/**"
        // Exclude WCS 1.1.2 and semantics code
        exclude "opendap/wcs/v1_1_2/**"
        exclude "opendap/semantics/**"
        // Exclude prototype Amazon Web Services code from production
        exclude "opendap/aws/**"
        exclude "opendap/noaa_s3/**"
        // Exclude async test code
        exclude "opendap/async/**"
    }
    into("src/main/java")
}

task PreProcessSourceCode(dependsOn: ['clean', 'init_dir', 'copySources', 'copyResources']) {
    description = "Moves selected source code from the development tree into the build/src directory. " +
            "The code text is filtered to update version numbers."
}

war {
    // Define war file name
    archiveName("${DEPLOYMENT_CONTEXT}.war")
}

task getReports(dependsOn: ['htmlDependencyReport', 'propertyReport', 'taskReport', 'projectReport']){
    println("Reports:")
}

//test {
//    useJUnitPlatform()
//}