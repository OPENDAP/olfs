package opendap.bes.caching;

import opendap.namespaces.BES;
import org.jdom.Document;
import org.jdom.Element;

import java.util.ArrayList;
import java.util.List;

/**
 * This class is used to wrap whatever object is being cached along with data used to
 * operate in the cache. Most significantly this class implements the Comparable interface such that
 * the "natural" ordering of instances will be based on the last time each instance was accessed by the server.
 * This is not an autonomous operation and is tightly coupled with code in "BesNodeCache.getNode()" to
 * ensure that the ordering remains correct.
 */
class NodeTransaction  {

    private Document request;
    private Object response;
    private long timeCreated;
    private String key;


    /**
     * Creates a NodeTransaction with a last update time and last accessed time
     * of "now".
     *
     * @param key The key value which will be used to identify this
     *            NodeTransaction.
     * @param request The request document that was used to elicit the response.
     * @param response The response Object that was generated by the request. In
     *                 practice this is either an instance of Document or BESError.
     */
    NodeTransaction(String key, Document request, Object response){
        this.key = key;
        this.request = (Document)request.clone();

        // Dump the timeout context from the request.
        List list = this.request.getRootElement().getChildren("setContext", BES.BES_NS);
        List<Element> dropList = new ArrayList<>();
        for(Object o : list){
            Element setContextElement = (Element) o;
            String contextName=setContextElement.getAttributeValue("name");
            if(contextName.equals("bes_timeout")){
                dropList.add(setContextElement);
            }
        }
        for(Element dropMe: dropList){
            dropMe.detach();
        }

        this.response = response;
        timeCreated = System.nanoTime();
    }

    public String getKey(){
        return key;
    }


    long getTimeCreated() {
        return timeCreated;
    }

    public Object getResponse(){
        return response;
    }

    public void setResponse(Object response) {
        this.response = response;
    }

    public Document getRequest(){
        return (Document) request.clone();
    }

}
